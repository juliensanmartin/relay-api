services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=relay
      - POSTGRES_PASSWORD=relay
      - POSTGRES_DB=relay_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U relay"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - relay-network

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672" # For services to connect
      - "15672:15672" # For the web management UI
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - relay-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - relay-network

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_PATH: services/auth-service
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - PORT=5001
      - SERVICE_NAME=auth-service
      - DB_USER=relay
      - DB_PASSWORD=relay
      - DB_HOST=postgres
      - DB_DATABASE=relay_db
      - DB_PORT=5432
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - relay-network

  post-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_PATH: services/post-service
    container_name: post-service
    restart: unless-stopped
    ports:
      - "5002:5002"
    environment:
      - PORT=5002
      - SERVICE_NAME=post-service
      - DB_USER=relay
      - DB_PASSWORD=relay
      - DB_HOST=postgres
      - DB_DATABASE=relay_db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - relay-network

  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_PATH: services/notification-service
    container_name: notification-service
    restart: unless-stopped
    ports:
      - "5003:5003"
    environment:
      - PORT=5003
      - SERVICE_NAME=notification-service
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - relay-network

  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_PATH: services/api-gateway
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - SERVICE_NAME=api-gateway
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - AUTH_SERVICE_URL=http://auth-service:5001
      - POST_SERVICE_URL=http://post-service:5002
    depends_on:
      - auth-service
      - post-service
    networks:
      - relay-network

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - relay-network

  grafana:
    image: grafana/grafana-oss:10.1.5
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3009:3000" # Access Grafana on your chosen port: localhost:3009
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - relay-network

  jaeger:
    image: jaegertracing/all-in-one:1.53
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # Jaeger UI
      - "4318:4318" # OTLP endpoint for receiving traces
    networks:
      - relay-network

networks:
  relay-network:
    driver: bridge

volumes:
  postgres_data:
  grafana-storage:
  redis_data:
